/* tslint:disable */
/* eslint-disable */
/**
 * Galasa Web Requests
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CPSRequest,
    CPSRequestFromJSON,
    CPSRequestToJSON,
    RASRequest,
    RASRequestFromJSON,
    RASRequestToJSON,
    TestRunRequest,
    TestRunRequestFromJSON,
    TestRunRequestToJSON,
    TestRuns,
    TestRunsFromJSON,
    TestRunsToJSON,
} from '../models';

export interface PropertystoreGetRequest {
    cPSRequest: CPSRequest;
}

export interface ResultarchivePostRequest {
    rASRequest: RASRequest;
}

export interface RunsIdGetRequest {
    id: number;
}

export interface RunsIdPostRequest {
    id: number;
    testRunRequest: TestRunRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get All Runs
     */
    async allrunsGetRaw(): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/allruns`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get All Runs
     */
    async allrunsGet(): Promise<Array<object>> {
        const response = await this.allrunsGetRaw();
        return await response.value();
    }

    /**
     * Get CPS Property
     */
    async propertystoreGetRaw(requestParameters: PropertystoreGetRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.cPSRequest === null || requestParameters.cPSRequest === undefined) {
            throw new runtime.RequiredError('cPSRequest','Required parameter requestParameters.cPSRequest was null or undefined when calling propertystoreGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/propertystore`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: CPSRequestToJSON(requestParameters.cPSRequest),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get CPS Property
     */
    async propertystoreGet(requestParameters: PropertystoreGetRequest): Promise<string> {
        const response = await this.propertystoreGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get RAS Structure
     */
    async resultarchiveGetRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/resultarchive`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get RAS Structure
     */
    async resultarchiveGet(): Promise<object> {
        const response = await this.resultarchiveGetRaw();
        return await response.value();
    }

    /**
     * Get File
     */
    async resultarchivePostRaw(requestParameters: ResultarchivePostRequest): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.rASRequest === null || requestParameters.rASRequest === undefined) {
            throw new runtime.RequiredError('rASRequest','Required parameter requestParameters.rASRequest was null or undefined when calling resultarchivePost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/resultarchive`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RASRequestToJSON(requestParameters.rASRequest),
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get File
     */
    async resultarchivePost(requestParameters: ResultarchivePostRequest): Promise<Blob> {
        const response = await this.resultarchivePostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Run Info
     */
    async runsIdGetRaw(requestParameters: RunsIdGetRequest): Promise<runtime.ApiResponse<TestRuns>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling runsIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/runs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TestRunsFromJSON(jsonValue));
    }

    /**
     * Get Run Info
     */
    async runsIdGet(requestParameters: RunsIdGetRequest): Promise<TestRuns> {
        const response = await this.runsIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Start TestRuns
     */
    async runsIdPostRaw(requestParameters: RunsIdPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling runsIdPost.');
        }

        if (requestParameters.testRunRequest === null || requestParameters.testRunRequest === undefined) {
            throw new runtime.RequiredError('testRunRequest','Required parameter requestParameters.testRunRequest was null or undefined when calling runsIdPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/runs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TestRunRequestToJSON(requestParameters.testRunRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Start TestRuns
     */
    async runsIdPost(requestParameters: RunsIdPostRequest): Promise<void> {
        await this.runsIdPostRaw(requestParameters);
    }

}
